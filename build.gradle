plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "5.0.0.4638"
	id 'jacoco' // Collect unit test coverage
	id 'groovy' // Grovvy script for some suitable function during build current script.
}

group = 'com.inaction'
version = 'inaction'

jacoco {
    toolVersion = "0.8.11"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

sonar {
    properties {
        property "sonar.projectKey", "spring-inaction"
        property "sonar.host.url", "http://localhost:9001"
		property "sonar.token", loadProperties("properties").getProperty("sonar.token")
		property "sonar.scm.provider","git"
		property "sonar.java.binaries", "$buildDir/classes/java/main"
		property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
    }
}

repositories {
	flatDir {
        dirs 'libs'
    }
	mavenCentral()
}

jar {
	manifest {
		// Specify the starter path.
        attributes 'Main-Class': 'com.inaction.InactionApplication'
    }
	// Remove the plain suffix during build a jar.
	archiveClassifier.set("")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	
	// For spring boot test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// For junit platform
	testImplementation(platform("org.junit:junit-bom:5.10.3"))
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
	// For mockito framework.
	testImplementation 'org.mockito:mockito-core:5.12.0'
}

test {
	useJUnitPlatform()
	testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
    }
}

def loadProperties(filePath) {
    Properties properties = new Properties()
    File propertiesFile = new File(filePath)
    properties.load(new FileInputStream(propertiesFile))
    return properties
}
